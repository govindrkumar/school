# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I4ldETnc8RKHP0CJpY7V4kaQKD5g80fS
"""

from google.colab import drive
drive.mount('/content/drive')

"""**Reasoning**:
Create a new code cell at the top of the notebook and consolidate all necessary import statements.


"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from google.colab import drive
from google.colab import files

"""# Universe Expansion (time vs scale factor / redshift)"""

# Load the data
df = pd.read_csv('/content/drive/MyDrive/universe_expansion.csv')

# Plot the data
plt.figure()
df.plot(kind = 'line')
plt.xlabel('Age (Billion Years)')
plt.ylabel('Scale Factor')
plt.title('Universe Expansion')
plt.show()

"""**Reasoning**:
Add a markdown cell below the code cell to document the universe expansion plot code.

# CMB temperature vs time

This code generates data for the Cosmic Microwave Background (CMB) temperature at different ages of the universe using the Planck 2015 cosmology. It then plots the CMB temperature as a function of the age of the universe.
"""

file_path = "/content/drive/MyDrive/cmb_temperature_data.csv"

# Read precomputed data (used plank15 of astropy module)
df_cmb = pd.read_csv(file_path)
print(df_cmb)

# Plot
plt.figure(figsize=(10, 6))
plt.plot(df_cmb['Age (Gyr)'], df_cmb['CMB Temperature (K)'], color='blue', linestyle='-')
plt.xlabel('Age of the Universe (Gyr)')
plt.ylabel('CMB Temperature (K)')
plt.title('CMB Temperature vs Age of the Universe')
plt.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

"""# Star formation rate vs time

SFRD(z)=0.0151+((1+z)/2.9)5.6(1+z)2.7‚Äã[M‚äô‚Äãyr‚àí1Mpc‚àí3]

This section compares different Star Formation Rate Density (SFR) functions as a function of redshift (z). It includes a user-provided formula, a simplified Madau & Dickinson formula, and two fitting models. The code calculates the SFR for each function across a range of redshifts and then plots the results to visualize their behavior and differences.
"""

# ---------------------------
# Step 1: Real Observational Data (Madau & Dickinson 2014)
# log10(SFRD) values converted to linear scale as
obs_data = {
    "Redshift": [0.05, 0.3, 0.5, 0.7, 1.0, 1.1, 1.75, 2.2, 2.3, 3.05,
                 3.8, 4.9, 5.9, 7.0, 7.9, 7.0, 8.0],
    "log_SFRD": [-1.82, -1.50, -1.39, -1.20, -1.25, -1.02, -0.75, -0.87, -0.75, -0.97,
                 -1.29, -1.42, -1.65, -1.79, -2.09, -2.00, -2.21],
    "Source": [
        "Wyder 2005", "Schiminovich 2005", "Schiminovich 2005", "Schiminovich 2005",
        "Schiminovich 2005", "Dahlen 2007", "Dahlen 2007", "Dahlen 2007",
        "Reddy+Steidel 2009", "Reddy+Steidel 2009", "Bouwens 2012", "Bouwens 2012",
        "Bouwens 2012", "Bouwens 2012", "Bouwens 2012", "Schenker 2013", "Schenker 2013"
    ]
}
df_obs = pd.DataFrame(obs_data)
df_obs["SFRD"] = 10**df_obs["log_SFRD"]  # Convert log to linear

# ---------------------------
# Step 2: Theoretical Models (User + Madau + Fittings)
z_values = np.linspace(0, 10, 300)

# User formula
param_00151, param_2_9, param_5_6, param_2_7 = 0.0151, 2.9, 5.6, 2.7
sfr_user = (param_00151 * (1 + ((1 + z_values)/param_2_9)**param_5_6)) / ((1 + z_values)**param_2_7)

# Madau & Dickinson simplified
a_madau, b_madau, c_madau = 0.01, 2.7, 5.6
sfr_madau = a_madau * (1 + z_values)**b_madau / (1 + ((1 + z_values)/2.9)**c_madau)

# Fitting models
sfr_model_A = 0.02 * (1 + z_values)**3 / (1 + ((1 + z_values)/5.0)**4)
sfr_model_B = 0.008 * (1 + z_values)**2.5 * np.exp(-z_values/3.0)

# ---------------------------
# Step 3: Plotting
plt.figure(figsize=(12, 7), dpi=200)

# Scatter observational data
plt.scatter(df_obs["Redshift"], df_obs["SFRD"],
            color="black", marker="o", s=60, label="Observational Data (Madau+2014)")

# Theoretical curves
plt.plot(z_values, sfr_user, label=r'User Formula',
         color='tab:blue', linestyle='-', linewidth=2)
plt.plot(z_values, sfr_madau, label=r'Madau & Dickinson (2014) Fit',
         color='tab:orange', linestyle='--', linewidth=2)
plt.plot(z_values, sfr_model_A, label='Fitting Model A',
         color='tab:green', linestyle='-.', linewidth=2)
plt.plot(z_values, sfr_model_B, label='Fitting Model B',
         color='tab:red', linestyle=':', linewidth=2)

# Formatting
plt.xlabel('Redshift $z$', fontsize=14)
plt.ylabel(r'SFR Density [M$_\odot$ yr$^{-1}$ Mpc$^{-3}$]', fontsize=14)
plt.title('Cosmic Star Formation History', fontsize=16, fontweight='bold')
plt.yscale('log')
plt.xlim(0, 10)
plt.ylim(1e-3, 1)  # nice range for log scale
plt.grid(True, which='both', linestyle='--', alpha=0.5)
plt.legend(fontsize=10, loc='upper right', frameon=True)
plt.tight_layout()
plt.show()

"""# Element abundance"""

df4 = pd.read_excel('/content/drive/MyDrive/Book1.xls')
df4.index = range(1,119)
print(df4)

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Assuming df4 is already loaded and contains 'Atomic Symbol' and 'Element Abudance'
# Ensure the data is sorted for better visualization
df_sorted_abundance = df4.sort_values(by='Element Abundance', ascending=True).copy()

# Create the horizontal bar chart
plt.figure(figsize=(12, 25)) # Adjust figure size to accommodate many bars

# Filter out elements with zero abundance if necessary for log scale
df_sorted_abundance = df_sorted_abundance[df_sorted_abundance['Element Abundance'] > 0].copy()

# Add color to the bars. We can use a single color or a colormap if we want varying colors.
# For simplicity, let's use a single color first.
bar_color = 'skyblue' # You can change this color

plt.barh(df_sorted_abundance['Element Symbol'], df_sorted_abundance['Element Abundance'], color=bar_color) # Use barh for horizontal bars
plt.xscale("log")   # Log scale for the abundance axis
plt.xlabel("Abundance in Universe (%)")
plt.ylabel("Element Symbol")
plt.title("Elemental Abundance in Universe (Log Scale)")
plt.grid(axis='x', linestyle='--', alpha=0.6) # Add grid lines on the x-axis
plt.tight_layout() # Adjust layout
plt.show()

# You can also display the sorted data
print("\nElemental Abundance Data (Sorted by Abundance):")
display(df_sorted_abundance)

# Filter elements with abundance > 0 and select top 10
top_elements = df4[df4['Element Abundance'] > 0] \
                .nlargest(10, 'Element Abundance')  # Directly get top 10

plt.figure(figsize=(10, 10))
patches, _ = plt.pie(top_elements['Element Abundance'], startangle=140)

# Legend with element symbols
plt.legend(patches, top_elements['Element Symbol'], loc="center left", bbox_to_anchor=(1, 0.5))

plt.title('Top 10 Most Abundant Elements in Universe')
plt.axis('equal')
plt.show()

# Display the data
print("Data used for the Pie Chart (Top 10 Elements with Abundance > 0):")
display(top_elements)

"""# Star mass vs lifespan"""

# 5 real stars
star_names = ["Proxima Centauri", "Sun", "Sirius A", "Betelgeuse", "Rigel"]
star_masses = np.array([0.123, 1, 2.1, 20, 21])  # in Solar masses

# Lifespan formula (Gyr) ~ Mass^-2.5
lifespans = 10 * star_masses**-2.5

# Colors for each star
colors = ["purple", "orange", "blue", "red", "green"]

plt.figure(figsize=(10,6))

# Plot each star
for i in range(len(star_names)):
    plt.plot([star_names[i], star_names[i]], [1e-3, lifespans[i]], marker='o', color=colors[i],
             linewidth=3, markersize=8, label=f"{star_names[i]} ({star_masses[i]} M‚òâ)")

plt.yscale("log")   # üëà Log scale
plt.ylabel("Lifespan (Gyr, log scale)")
plt.title("Star Mass vs Lifespan (5 Real Stars)")
plt.legend()
plt.grid(True, ls="--", lw=0.5)
plt.show()

"""# Supernova rate vs time"""

import io

# Provided data
data = """z,Rate_CCSN,Rate_Ia
0.00,0.50e-4,0.10e-4
0.07,1.06e-4,0.20e-4
0.10,1.20e-4,0.25e-4
0.20,1.50e-4,0.35e-4
0.30,2.00e-4,0.50e-4
0.39,3.29e-4,0.65e-4
0.45,3.80e-4,0.75e-4
0.50,4.10e-4,0.85e-4
0.60,5.00e-4,1.29e-4
0.62,5.20e-4,1.29e-4
0.70,5.80e-4,1.40e-4
0.73,6.40e-4,1.50e-4
0.80,6.20e-4,1.60e-4
0.90,6.00e-4,1.70e-4
1.00,5.80e-4,1.80e-4
1.10,5.50e-4,1.90e-4
1.20,5.00e-4,2.00e-4
1.30,4.50e-4,2.10e-4
1.40,4.00e-4,2.20e-4
1.50,3.70e-4,2.30e-4
1.60,3.50e-4,2.40e-4
1.70,3.35e-4,2.50e-4
1.80,3.20e-4,2.60e-4
1.90,3.10e-4,2.70e-4
2.00,3.70e-4,2.80e-4
2.10,3.65e-4,2.90e-4
2.20,3.60e-4,3.00e-4
2.30,3.55e-4,3.10e-4
2.40,3.50e-4,3.20e-4
2.50,3.50e-4,3.30e-4
"""

# Read the data into a pandas DataFrameu
df_sn = pd.read_csv(io.StringIO(data))

# Save the DataFrame to a CSV file in Google Drive
csv_path_sn = "/content/drive/MyDrive/supernova_rates.csv"
df_sn.to_csv(csv_path_sn, index=False)
print(f"Supernova rates data saved to {csv_path_sn}")

# Plot the data
plt.figure(figsize=(10, 6))

plt.plot(df_sn['z'], df_sn['Rate_CCSN'], marker='o', linestyle='-', label='Core-Collapse Supernova Rate')
plt.plot(df_sn['z'], df_sn['Rate_Ia'], marker='x', linestyle='--', label='Type Ia Supernova Rate')

plt.xlabel('Redshift (z)')
plt.ylabel('Supernova Rate (Mpc$^{-3}$ yr$^{-1}$)')
plt.title('Supernova Formation Rate vs. Redshift')
plt.yscale('log') # Use a log scale for the y-axis as rates vary significantly
plt.grid(True, which="both", ls="--", linewidth=0.5)
plt.legend()
plt.tight_layout()
plt.show()

#histogram
plt.figure(figsize=(8,6))
plt.bar(df_sn["z"]-0.01, df_sn["Rate_CCSN"]*1e4, width=0.02, label="Core-Collapse SNe", alpha=0.7)
plt.bar(df_sn["z"]+0.01, df_sn["Rate_Ia"]*1e4, width=0.02, label="Type Ia SNe", alpha=0.7)
plt.xlabel("Redshift (z)", fontsize=12)
plt.ylabel("SN Rate (10‚Åª‚Å¥ yr‚Åª¬π Mpc‚Åª¬≥)", fontsize=12)
plt.title("Supernova Rate vs Cosmic Time (Histogram)", fontsize=14)
plt.legend()
plt.grid(True, alpha=0.3, linestyle="--")
plt.tight_layout()
plt.show()

"""This code loads data related to the expansion of the universe and plots the scale factor against age. The scale factor is a measure of how much the universe has expanded relative to a specific time.

This code plots the relationship between a star's mass and its estimated lifespan. It uses a simplified formula to calculate the lifespan based on mass for a few representative star types and also for some real stars. The plot shows how more massive stars have significantly shorter lifespans compared to less massive ones. The second plot uses a log scale for the lifespan axis to better visualize the wide range of lifespans.

## Solar System formation timeline
"""

import matplotlib.pyplot as plt

# Events aur age
events = [
    'Formation of the Sun',
    'First solids (CAIs)',
    'Planetesimals',
    'Terrestrial planets (Earth)',
    'Gas giants (Jupiter, Saturn)',
    'Late Heavy Bombardment',
    'Formation of the Moon',
    'Ice giants (Uranus, Neptune)',
    'Migration of giant planets',
    'Kuiper Belt formation'
]

ages = [4.57e9, 4.567e9, 4.56e9, 4.54e9, 4.5e9, 4.0e9, 4.5e9, 4.4e9, 4.0e9, 4.5e9]

# Sort karne ka simple tarika
ages, events = zip(*sorted(zip(ages, events), reverse=True))

# Graph
plt.figure(figsize=(12,6))
plt.plot(ages, range(len(ages)), marker='o', color='darkorange')

for i in range(len(ages)):
    plt.text(ages[i], i, "  " + events[i], va='center', fontsize=9)

plt.yticks([])
plt.xlabel("Age (Billion Years Ago)")
plt.title("Timeline of Solar System Formation")
plt.gca().invert_xaxis()
plt.grid(axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

"""This code loads elemental abundance data, sorts it by abundance, and then generates a horizontal bar chart to visualize the abundance of each element in the universe on a logarithmic scale. This makes it easier to compare the vast differences in the relative amounts of different elements.

### Sun Luminosity vs Time

The Sun's luminosity isn't constant; it changes over billions of years as it evolves. We can model this change or use data from stellar evolution models.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Stellar evolution approximation (Sun-like star)
# Time from formation (Gyr)
t_main_seq = np.linspace(0, 10, 200)  # Main sequence
t_red_giant = np.linspace(10, 11, 50) # Red giant phase

# Luminosity approximations
# Main sequence: slight increase from 0.7 L_sun to 1.0 L_sun at present age 4.57 Gyr, continues to ~1.5 L_sun at 10 Gyr
L_main_seq = 0.7 + 0.8 * (t_main_seq / 10)**1.5  # Rough power law to simulate MS evolution

# Red giant phase: sharp increase
L_red_giant = np.linspace(L_main_seq[-1], 100, len(t_red_giant))

# Combine
time = np.concatenate((t_main_seq, t_red_giant))
luminosity = np.concatenate((L_main_seq, L_red_giant))

# Create DataFrame
df_star = pd.DataFrame({'Age_from_formation_Gyr': time, 'Luminosity_Lsun': luminosity})

# Plot
plt.figure(figsize=(12, 6))
plt.plot(df_star['Age_from_formation_Gyr'], df_star['Luminosity_Lsun'], color='orange', linewidth=2, label='Sun-like Star')

# Highlight present day
present_age = 4.57
plt.axvline(present_age, color='gray', linestyle='--', label='Present Day (~4.57 Gyr)')
plt.scatter(present_age, 1.0, color='red', zorder=5)
plt.text(present_age+0.1, 1.1, 'Present Sun', fontsize=10, color='red')

# Labels and title
plt.xlabel('Age from Formation (Gyr)')
plt.ylabel('Luminosity (L / L‚òâ)')
plt.title('Approximate Evolution of a Sun-like Star', fontsize=14, weight='bold')
plt.yscale('log')  # Log scale for luminosity
plt.grid(True, which='both', linestyle='--', linewidth=0.5)
plt.legend()
plt.tight_layout()
plt.show()

"""### Earth Age vs First Life Timeline

Let's create a timeline that marks significant events in Earth's history, focusing on the emergence and evolution of life.
"""

import math

# Powers of 10 list
powers = [4, 2, 0, -2, -4]

# Solve using math.pow and print
print('Events in Million years :-')
print('Log Values')
for p in powers:
    value = math.pow(10, p)
    print(f"10^{p} = {value}")

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Data
df = pd.DataFrame({
    'Event': [
        'Formation of Earth', 'Formation of the Moon', 'First Oceans',
        'Oldest Minerals', 'First Life', 'Great Oxygenation', 'First Eukaryotes',
        'Multicellular Life', 'Cambrian Explosion', 'First Land Plants',
        'First Vertebrates', 'First Insects', 'First Amphibians', 'First Reptiles',
        'Permian-Triassic Extinction', 'First Dinosaurs', 'Breakup of Pangea',
        'First Mammals', 'First Birds', 'Cretaceous-Paleogene Extinction',
        'First Primates', 'Homo Sapiens', 'Last Ice Age Ends', 'Agriculture',
        'Industrial Revolution', 'Present Day'
    ],
    'Age (Ma)': [
        4540, 4500, 4400, 4400, 3500, 2400, 1800, 600, 541, 470, 480, 400, 370, 310,
        252, 230, 200, 200, 150, 66, 55, 0.3, 0.0117, 0.01, 0.0002, 0
    ]
})

# Replace 0 Ma with tiny positive number for log scale, and sort by age
df['Age (Ma)'] = df['Age (Ma)'].replace(0, 0.00001)
df = df.sort_values('Age (Ma)', ascending=False).reset_index(drop=True)


# Assign colors by type
def color_type(event):
    if any(keyword in event for keyword in ['Life','Eukaryotes','Multicellular','Insects','Amphibians','Repptiles','Dinosaurs','Mammals','Birds','Primates','Homo']):
        return 'green' # Biological events
    elif any(keyword in event for keyword in ['Earth','Moon','Oceans','Minerals','Oxygenation','Extinction','Breakup', 'Ice Age', 'Agriculture', 'Industrial Revolution', 'Present Day']):
        return 'blue' # Geological and Human civilization events
    else:
        return 'red' # Other events

df['color'] = df['Event'].apply(color_type)

# Plot
plt.figure(figsize=(12, 8)) # Increased figure size
plt.barh(df['Event'], df['Age (Ma)'], color=df['color']) # Use barh for horizontal bars

plt.xscale('log')
plt.gca().invert_xaxis() # Invert x-axis to show older times on the left
plt.xlabel("Age (Million Years Ago, Ma) [log scale]")
plt.ylabel("Event")
plt.title("Timeline of Earth's History & Life Evolution", fontsize=14, weight="bold")
plt.grid(True, axis='x', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()

"""## Atmospheric oxygen % vs time"""

import pandas as pd

# Load your Excel
df5 = pd.read_excel('/content/drive/MyDrive/GEOCARB_input_arrays.xls')

# Dictionary mapping old column names to descriptive names
rename_dict = {
    'age': 'Age (Ma)',
    'Sr': 'Strontium Isotope Ratio (87Sr/86Sr)',
    'eSr': 'Sr Ratio Error',
    'd13C': 'Carbon Isotope (Œ¥13C)',
    'ed13C': 'Œ¥13C Error',
    'd34S': 'Sulfur Isotope (Œ¥34S)',
    'ed34S': 'Œ¥34S Error',
    'fR': 'Fraction Organic Carbon Burial',
    'efR': 'fR Error',
    'fL': 'Fraction Land Area Exposed',
    'efL': 'fL Error',
    'fA': 'Fraction Carbon Burial (fA)',
    'efA': 'fA Error',
    'fA_Godderis': 'fA (Godderis et al.)',
    'efA_Godderis': 'fA Godderis Error',
    'fAw_fA': 'Weatherable Continental Area / fA',
    'efAw_fA': 'fAw/fA Error',
    'fAw_fA_Godderis': 'fAw/fA (Godderis)',
    'efAw_fA_Godderis': 'fAw/fA Godderis Error',
    'fD': 'Fraction Organic Carbon Deep-Sea Burial',
    'efD': 'fD Error',
    'fD_Godderis': 'fD (Godderis)',
    'efD_Godderis': 'fD Godderis Error',
    'RT': 'Global Mean Temperature Proxy',
    'eRT': 'RT Error',
    'GEOG': 'Continental Configuration Factor',
    'eGEOG': 'GEOG Error',
    'GEOG_Godderis': 'GEOG (Godderis)',
    'eGEOG_Godderis': 'GEOG Godderis Error',
    'fSR': 'Fraction Sulfide Weathering',
    'eFSR': 'fSR Error',
    'fC': 'Fraction Carbonate Burial',
    'efC': 'fC Error',
    'O? Level (%)': 'Atmospheric Oxygen Level (%)'
}

# Rename columns
df5.rename(columns=rename_dict, inplace=True)

# Check the renamed DataFrame
print(df5.head())

# Save as .xlsx instead of .xls
df5.to_excel('/content/drive/MyDrive/GEOCARB_input_arrays_renamed.xlsx', index=False)

# Load your GEOCARB dataset
df5 = pd.read_excel('/content/drive/MyDrive/GEOCARB_input_arrays_renamed.xlsx')

# Optional: rename for convenience
age = df5['Age (Ma)']
O2 = df5['Atmospheric Oxygen Level (%)']

# Example: approximate error (you can use actual if available)
O2_err = 0.05 * O2  # 5% of value, replace with actual if you have

# Geological periods for background shading (Ma, start and end)
periods = [
    ('Cambrian', 541, 485, '#fde0dd'),
    ('Ordovician', 485, 444, '#fa9fb5'),
    ('Silurian', 444, 419, '#c51b8a'),
    ('Devonian', 419, 359, '#7a0177'),
    ('Carboniferous', 359, 299, '#edf8fb'),
    ('Permian', 299, 252, '#b3cde3'),
    ('Triassic', 252, 201, '#6497b1'),
    ('Jurassic', 201, 145, '#005b96'),
    ('Cretaceous', 145, 66, '#03396c'),
    ('Paleogene', 66, 23, '#ffddc1'),
    ('Neogene', 23, 2.6, '#fbb4ae'),
    ('Quaternary', 2.6, 0, '#b3cde3')
]

plt.figure(figsize=(15,7))

# Background shading for geological periods
for name, start, end, color in periods:
    plt.axvspan(end, start, color=color, alpha=0.3)
    plt.text((start+end)/2, max(O2)+2, name, ha='center', va='bottom', fontsize=9, rotation=90)

# Plot line + error band
plt.plot(age, O2, color='green', linewidth=2, label='Atmospheric O‚ÇÇ')
plt.fill_between(age, O2-O2_err, O2+O2_err, color='green', alpha=0.2, label='¬±5% error')

plt.xlabel('Age (Million Years Ago)')
plt.ylabel('Atmospheric Oxygen Level (%)')
plt.title('Atmospheric Oxygen Level Over Phanerozoic Eon')
plt.gca().invert_xaxis()  # Oldest left, present right
plt.ylim(0, max(O2)+10)
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

"""## Fossil diversity

### Subtask:
Search for a dataset on fossil diversity over geological time (e.g., from the Paleobiology Database), load it, and create a plot showing the number of genera or families over time.

**Reasoning**:
Search for and download a fossil diversity dataset from the Paleobiology Database (PBDB), then load it into a pandas DataFrame and inspect its structure.
"""

import pandas as pd

url = "https://paleobiodb.org/data1.2/occs/list.csv?max_ma=10000"
df = pd.read_csv(url, low_memory=False)
print(df.head())

df.to_csv('/content/drive/MyDrive/pbdb_occurrences.csv', index=False)

print(len(df))

# Unique stages in dataset
#very big 1660293 rows
print(df['early_interval'].unique())

# 2Ô∏è‚É£ Define mapping: stage/epoch -> major period
stage_to_period = {
    # Precambrian
    'Cryogenian':'Precambrian', 'Tonian':'Precambrian', 'Ediacaran':'Precambrian',

    # Cambrian
    'Furongian':'Cambrian', 'Paibian':'Cambrian', 'Delamaran':'Cambrian', 'Stage 3':'Cambrian',
    'Middle Cambrian':'Cambrian', 'Stage 2':'Cambrian',

    # Ordovician
    'Tremadoc':'Ordovician', 'Tremadocian':'Ordovician', 'Arenig':'Ordovician', 'Darriwilian':'Ordovician',
    'Middle Ordovician':'Ordovician', 'Late Ordovician':'Ordovician',

    # Silurian
    'Llandovery':'Silurian', 'Wenlock':'Silurian', 'Ludlow':'Silurian', 'Pridoli':'Silurian',

    # Devonian
    'Lochkovian':'Devonian', 'Pragian':'Devonian', 'Emsian':'Devonian', 'Eifelian':'Devonian',
    'Givetian':'Devonian', 'Frasnian':'Devonian', 'Famennian':'Devonian',

    # Carboniferous
    'Kinderhookian':'Carboniferous', 'Tournaisian':'Carboniferous',  # Mississippian
    'Bashkirian':'Carboniferous', 'Moscovian':'Carboniferous', 'Kasimovian':'Carboniferous', 'Gzhelian':'Carboniferous', # Pennsylvanian

    # Permian
    'Asselian':'Permian', 'Sakmarian':'Permian', 'Artinskian':'Permian', 'Wordian':'Permian',
    'Wuchiapingian':'Permian', 'Changhsingian':'Permian',

    # Triassic
    'Induan':'Triassic', 'Olenekian':'Triassic', 'Anisian':'Triassic', 'Ladinian':'Triassic',
    'Carnian':'Triassic', 'Norian':'Triassic', 'Rhaetian':'Triassic',

    # Jurassic
    'Hettangian':'Jurassic', 'Sinemurian':'Jurassic', 'Pliensbachian':'Jurassic', 'Toarcian':'Jurassic',
    'Aalenian':'Jurassic', 'Bajocian':'Jurassic', 'Bathonian':'Jurassic', 'Callovian':'Jurassic',
    'Oxfordian':'Jurassic', 'Kimmeridgian':'Jurassic', 'Tithonian':'Jurassic',

    # Cretaceous
    'Berriasian':'Cretaceous','Valanginian':'Cretaceous','Hauterivian':'Cretaceous','Barremian':'Cretaceous',
    'Aptian':'Cretaceous','Albian':'Cretaceous','Cenomanian':'Cretaceous','Turonian':'Cretaceous',
    'Coniacian':'Cretaceous','Santonian':'Cretaceous','Campanian':'Cretaceous','Maastrichtian':'Cretaceous',

    # Paleogene
    'Paleocene':'Paleogene','Eocene':'Paleogene','Oligocene':'Paleogene',

    # Neogene
    'Miocene':'Neogene','Pliocene':'Neogene',

    # Quaternary
    'Pleistocene':'Quaternary','Holocene':'Quaternary'
}

# 3Ô∏è‚É£ Map stages to major periods
df['major_period'] = df['early_interval'].map(stage_to_period)

# 4Ô∏è‚É£ Split dataset into 13 DataFrames (one per major period)
major_periods = df['major_period'].dropna().unique()  # existing periods in your dataset
dfs_period = {period: df[df['major_period'] == period].copy() for period in major_periods}

# ‚úÖ Example: access Carboniferous dataframe
carboniferous_df = dfs_period['Carboniferous']
print(f"Carboniferous rows: {len(carboniferous_df)}")
print(carboniferous_df.head())

for period, period_df in dfs_period.items():
    # Count species per early_interval
    species_count = period_df['early_interval'].value_counts().sort_index()

    # Plot
    plt.figure(figsize=(10,5))
    species_count.plot(kind='bar', color = 'teal')

    plt.title(f"Species Distribution in {period}")
    plt.xlabel("Stage / Early Interval")
    plt.ylabel("Number of Occurrences")
    plt.xticks(rotation=90)
    plt.tight_layout()

    # Save graph (optional)
    plt.savefig(f"{period}_species_distribution.png")

    plt.show()

"""##Mass Exitinction"""

#mass exitinction
x = pd.read_csv('/content/drive/MyDrive/pbdb_occurrences.csv')
print(x)

#filtering the data
# Mass extinction events ke approximate age ranges (Ma = million years ago)
mass_extinctions = {
    "End-Ordovician": (443.8, 443.0),
    "Late Devonian": (372.2, 358.9),
    "End-Permian": (251.9, 251.0),
    "End-Triassic": (201.3, 201.0),
    "End-Cretaceous": (66.0, 65.5)
}

# Empty dict to store filtered DataFrames
dfs_extinctions = {}

# Filter karna for each extinction
for name, (start_ma, end_ma) in mass_extinctions.items():
    # loc use karke filter karo
    df_filtered = x.loc[(x['max_ma'] >= end_ma) & (x['min_ma'] <= start_ma)].copy()
    dfs_extinctions[name] = df_filtered
    print(f"{name}: {len(df_filtered)} occurrences")

extinctions = {
    "End-Ordovician": (443.4, 29144),
    "Late Devonian": (372.2, 23814),
    "End-Permian": (251.9, 10648),
    "End-Triassic": (201.3, 13497),
    "End-Cretaceous": (66.0, 102199)
}

times = [v[0] for v in extinctions.values()]
counts = [v[1] for v in extinctions.values()]
labels = list(extinctions.keys())

plt.figure(figsize=(10,6))

# Line connect karne ke liye ek common color
plt.plot(times, counts, linestyle='-', color='gray', alpha=0.5)

# Har event alag marker + color + legend
colors = ['red', 'blue', 'green', 'purple', 'orange']
markers = ['o', 's', '^', 'D', 'P']

for t, c, l, col, mark in zip(times, counts, labels, colors, markers):
    plt.plot(t, c, marker=mark, color=col, markersize=10, linestyle='None', label=l)

plt.gca().invert_xaxis()
plt.title("Mass Extinction Events Through Time", fontsize=14, weight='bold')
plt.xlabel("Time (Million Years Ago)")
plt.ylabel("Number of Species Lost")
plt.grid(True, linestyle='--', alpha=0.5)
plt.legend(bbox_to_anchor=(1.05, 1), loc="upper left", fontsize=9)
plt.tight_layout()
plt.show()

"""## Human Brain"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# ---------------- DATA ----------------
data = {
    "Species": [
        "Australopithecus anamensis",
        "Australopithecus afarensis",
        "Australopithecus africanus",
        "Australopithecus garhi",
        "Australopithecus sediba",
        "Paranthropus aethiopicus",
        "Paranthropus boisei",
        "Paranthropus robustus",
        "Homo habilis",
        "Homo rudolfensis",
        "Homo erectus",
        "Homo ergaster",
        "Homo antecessor",
        "Homo heidelbergensis",
        "Homo neanderthalensis",
        "Denisovans",
        "Homo floresiensis",
        "Homo naledi",
        "Homo sapiens"
    ],
    "Time_range_MYA": [
        "4.2‚Äì3.9", "3.9‚Äì2.9", "3.0‚Äì2.1", "2.5‚Äì2.4", "1.98‚Äì1.78",
        "2.7‚Äì2.3", "2.3‚Äì1.2", "2.0‚Äì1.2", "2.4‚Äì1.4", "2.4‚Äì1.8",
        "1.9‚Äì0.1", "1.9‚Äì1.4", "1.2‚Äì0.8", "0.7‚Äì0.2", "0.4‚Äì0.04",
        "0.3‚Äì0.05", "0.1‚Äì0.05", "0.335‚Äì0.236", "0.3‚Äì0"
    ],
    "Cranial_capacity_cc": [
        "365‚Äì370", "375‚Äì550", "420‚Äì500", "450", "420‚Äì450",
        "410", "500‚Äì550", "500‚Äì550", "510‚Äì600", "700‚Äì800",
        "600‚Äì1100", "600‚Äì910", "1000‚Äì1150", "1100‚Äì1300",
        "1200‚Äì1750", "1200‚Äì1600", "380‚Äì420", "465‚Äì610", "1200‚Äì1600"
    ]
}

df = pd.DataFrame(data)

# ---------------- MIDPOINT CALCULATION ----------------
time_mid = []
for val in df["Time_range_MYA"]:
    parts = val.replace("present", "0").split("‚Äì")
    nums = [float(p) for p in parts]
    time_mid.append(np.mean(nums))

capacity_mid = []
for val in df["Cranial_capacity_cc"]:
    parts = val.split("‚Äì")
    if len(parts) == 1:
        capacity_mid.append(float(parts[0]))
    else:
        capacity_mid.append(np.mean([float(p) for p in parts]))

df["Time_mid_MYA"] = time_mid
df["Cranial_capacity_mid"] = capacity_mid

# ---------------- PLOT 1: Line vs Time ----------------
# Example data (tumhare df_sorted ke according chalega)
species = df_sorted["Species"]
x = df_sorted["Time_mid_MYA"]
y = df_sorted["Cranial_capacity_mid"]

plt.figure(figsize=(10,6))

# Har marker ko ek alag color dena
colors = plt.cm.tab20(np.linspace(0,1,len(species)))

for i in range(len(species)):
    xi = x[i]
    yi = y[i]
    sp = species[i]
    plt.plot(xi, yi, marker="o", markersize=8,
             color=colors[i], label=sp)
  # alag color + legend label

# Background line (common curve)
plt.plot(x, y, linestyle="--", color="gray", alpha=0.5)

plt.gca().invert_xaxis()
plt.xlabel("Time (Million Years Ago)")
plt.ylabel("Cranial Capacity (cc)")
plt.title("Brain Size (Cranial Capacity) vs Time (Hominids)")
plt.grid(True)

# Legend outside graph (clean look)
plt.legend(bbox_to_anchor=(1.05, 1), loc="upper left", fontsize=8)

plt.show()

# ---------------- PLOT 2: Bar vs Species ----------------
plt.figure(figsize=(12,6))
plt.bar(df["Species"], df["Cranial_capacity_mid"], color="skyblue")
plt.xticks(rotation=45, ha="right")
plt.ylabel("Cranial Capacity (cc)")
plt.title("Cranial Capacity of Different Hominid Species")
plt.grid(axis="y", linestyle="--", alpha=0.7)
plt.show()

"""##Human population growth"""

import pandas as pd
import matplotlib.pyplot as plt

# Expanded human population timeline with more events
data = {
    "Year_BP": [
        -1_000_000, -800_000, -500_000, -200_000, -100_000, -50_000, -20_000, -10_000,
        -5_000, -2_000, -1_000, -500, -200, -100, -50, -20, -10, -5, -2, -1, 0, 50, 100
    ],
    "Population_millions": [
        0.01, 0.02, 0.05, 0.1, 0.2, 1.0, 2.0, 4.0, 20.0, 60.0, 200.0, 400.0, 600.0, 1000.0,
        2000.0, 3000.0, 4500.0, 6000.0, 7800.0, 8000.0, 9000.0, 10400.0, 11000.0
    ],
    "Event": [
        "Early humans appear", "Homo erectus emerges", "Early settlements", "Homo sapiens emerges",
        "Early societies", "Ice Age small groups", "Post-Ice Age", "Agriculture Revolution",
        "Bronze Age", "Early civilizations", "1000 AD population", "1500 AD population", "1800 AD",
        "1900 AD", "1950 AD", "1980 AD", "2000 AD", "2015 AD", "2023 AD", "2025 AD",
        "2050 Projection", "2100 Projection", "2150 Projection"
    ]
}

df = pd.DataFrame(data)


#Important information
print("Year_BP\tPopulation(millions)\tlog10(Population)")
for year, pop in zip(df["Year_BP"], df["Population_millions"]):
    print(f"{year}\t{pop}\t{np.log10(pop):.3f}")


# Colors & markers for each event
colors = plt.cm.tab20.colors
markers = ['o','s','^','D','P','X','*','h','H','+','x','1','2','3','4','8','p','v','<','>']

def plot_segment(df_segment, title, xlim, key_xticks):
    plt.figure(figsize=(18,5))  # Wider figure
    plt.plot(df_segment["Year_BP"], df_segment["Population_millions"], linestyle='-', color='gray', alpha=0.5)

    for year, pop, event, col, mark in zip(df_segment["Year_BP"], df_segment["Population_millions"], df_segment["Event"], colors, markers):
        plt.plot(year, pop, marker=mark, color=col, markersize=10, linestyle='None', label=event)

    plt.gca().invert_xaxis()
    plt.yscale('log')
    plt.xlabel("Years Before Present")
    plt.ylabel("Population (millions, log scale)")
    plt.title(title)
    plt.xlim(xlim)

    # Custom xticks for readability
    plt.xticks(key_xticks, [f"{abs(int(y))}" for y in key_xticks], rotation=45)

    plt.grid(True, which='both', ls='--', alpha=0.5)
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=9)
    plt.tight_layout()
    plt.show()

# Segment 1: Prehistory
prehistory = df[df["Year_BP"] <= -10_000]
prehistory_xticks = [-1_000_000, -800_000, -500_000, -200_000, -100_000, -50_000, -20_000, -10_000]
plot_segment(prehistory, "Human Population: Prehistory", (-1_000_000, -10_000), prehistory_xticks)

# Segment 2: Historical
historical = df[(df["Year_BP"] > -10_000) & (df["Year_BP"] <= 0)]
historical_xticks = [-10_000, -5_000, -2_000, -1_000, -500, -200, -100, -50, -20, -10, -5, -2, -1, 0]
plot_segment(historical, "Human Population: Historical Period", (-10_000, 0), historical_xticks)

# Segment 3: Modern & Future
modern = df[df["Year_BP"] > 0]
modern_xticks = [0, 50, 100]
plot_segment(modern, "Human Population: Modern & Future Projections", (0, 2100), modern_xticks)

"""# Technological growth curve

##Prehistoric
"""

import pandas as pd
import matplotlib.pyplot as plt

# Prehistoric tech events
df_pre = pd.DataFrame({
    'Year': [-2_500_000, -300_000, -40_000, -10_000, -5_000, -3_500, -1_200],
    'Event': [
        'Stone Tools', 'Control of Fire', 'Early Art & Culture', 'Agriculture', 'Bronze Age',
        'Writing', 'Iron Age'
    ]
})

# Cumulative tech level
df_pre['Tech_Level'] = range(1, len(df_pre)+1)

# Marker styles and colors
markers = ['o', 's', '^', 'D', 'v', 'p', '*']
colors = ['red', 'blue', 'green', 'orange', 'purple', 'brown', 'cyan']

plt.figure(figsize=(20,5))

# Simple for loop
for i in range(len(df_pre)):
    plt.plot(df_pre['Year'][i], df_pre['Tech_Level'][i],
             marker=markers[i], color=colors[i], markersize=10,
             linestyle='None', label=df_pre['Event'][i])

# Connecting line
plt.plot(df_pre['Year'], df_pre['Tech_Level'], linestyle='-', color='darkgreen', alpha=0.5)

plt.xlabel("Year (BC = negative)")
plt.ylabel("Cumulative Tech Level")
plt.title("Prehistoric Technological Growth (Stone Tools ‚Üí Iron Age)")
plt.grid(True, linestyle='--', alpha=0.5)

# Legend outside the plot
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5), title="Events")
plt.tight_layout()
plt.show()

#saving graph
plt.savefig('Prehistoric tech growth.png')

"""##Historic"""

import pandas as pd
import matplotlib.pyplot as plt

# Historical tech events (0 ‚Üí 1900 AD)
df_hist = pd.DataFrame({
    'Year': [0, 500, 800, 105, 1200, 1400, 1600, 1760, 1850, 1900],
    'Event': [
        'Roman Empire', 'Early Medieval Tools', 'Early Medieval Tools',
        'Invention of Paper', 'High Medieval Tech', 'Printing Press / Renaissance',
        'Scientific Revolution', 'Industrial Revolution', 'Electricity & Telegraph', 'Pre-Modern Tech'
    ]
})
df_hist = df_hist.sort_values('Year').reset_index(drop=True)
df_hist['Tech_Level'] = range(1, len(df_hist)+1)  # recompute tech level after sorting

# Cumulative tech level
df_hist['Tech_Level'] = range(1, len(df_hist)+1)

# Marker styles and colors
markers = ['o', 's', '^', 'D', 'v', 'p', '*', 'h', '+', 'x']
colors = ['red', 'blue', 'green', 'orange', 'purple', 'brown', 'cyan', 'magenta', 'olive', 'grey']

plt.figure(figsize=(22,5))

# Plot each event with different marker/color using simple loop
for i in range(len(df_hist)):
    plt.plot(df_hist['Year'][i], df_hist['Tech_Level'][i],
             marker=markers[i], color=colors[i], markersize=10,
             linestyle='None', label=df_hist['Event'][i])

# Connecting line
plt.plot(df_hist['Year'], df_hist['Tech_Level'], linestyle='-', color='darkblue', alpha=0.5)

plt.xlabel("Year (AD)")
plt.ylabel("Cumulative Tech Level")
plt.title("Historical Technological Growth (0 ‚Üí 1900 AD)")
plt.grid(True, linestyle='--', alpha=0.5)

# Legend outside the plot
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5), title="Events")
plt.tight_layout()
plt.show()

#saving picture
plt.savefig('tech growth historical.png')

"""##Modern"""

import pandas as pd
import matplotlib.pyplot as plt

# Modern tech events (1900 ‚Üí present/future)
df_mod = pd.DataFrame({
    'Year': [1940, 1970, 2000, 2020],
    'Event': [
        'Atomic Age', 'Information Age / Computers', 'Internet', 'AI Acceleration'
    ]
})

# Cumulative tech level
df_mod['Tech_Level'] = range(1, len(df_mod)+1)

# Marker styles and colors
markers = ['o', 's', '^', 'D']
colors = ['red', 'blue', 'green', 'purple']

plt.figure(figsize=(22,5))

# Plot each event with different marker/color using simple loop
for i in range(len(df_mod)):
    plt.plot(df_mod['Year'][i], df_mod['Tech_Level'][i],
             marker=markers[i], color=colors[i], markersize=10,
             linestyle='None', label=df_mod['Event'][i])

# Connecting line
plt.plot(df_mod['Year'], df_mod['Tech_Level'], linestyle='-', color='darkred', alpha=0.5)

plt.xlabel("Year (AD)")
plt.ylabel("Cumulative Tech Level")
plt.title("Modern Technological Growth (1900 ‚Üí Present/Future)")
plt.grid(True, linestyle='--', alpha=0.5)

# Legend outside the plot
plt.legend(loc='center left', bbox_to_anchor=(1, 0.5), title="Events")
plt.tight_layout()
plt.show()

#saving graph
plt.savefig('tech gorwth modern.png')

#exporting to csv
df_tech_growth = pd.concat([df_pre, df_hist, df_mod], ignore_index=True)
df_tech_growth.to_csv('df_tech_growth.csv', index=False)